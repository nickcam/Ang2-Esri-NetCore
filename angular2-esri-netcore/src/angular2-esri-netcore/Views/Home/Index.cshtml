
@{
    //Declare a variable to determine whether to use the dist build or not. Change to true to use the bundled dist build.
    //I would think this would be generally handled using <environment> tag helpers instead of a boolean variable.
    bool useDistBuild = false;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>angular2-esri-netcore</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />

    <link href="//fonts.googleapis.com/css?family=Abel" rel="stylesheet">

    <link href="@Url.Content("~/csslib/font-awesome/css/font-awesome.min.css")" rel="stylesheet" />
    <link href="@Url.Content("~/csslib/bootstrap/dist/css/bootstrap.min.css")" rel="stylesheet" />

    <link rel="stylesheet" href="//js.arcgis.com/4.2/esri/css/main.css">

    <link href="@Url.Content("~/css/default.css")" rel="stylesheet" />

    <!-- 1. Load Angular2 libraries -->
    <!-- Polyfill(s) for older browsers -->
    <script src="@Url.Content("~/lib/core-js/client/shim.min.js")"></script>
    <script src="@Url.Content("~/lib/zone.js/dist/zone.js")"></script>
    <script src="@Url.Content("~/lib/reflect-metadata/Reflect.js")"></script>


    @if (!useDistBuild)
    {
        <script src="@Url.Content("~/lib/systemjs/dist/system.src.js")"></script>

         <!-- Load ESRI api -->
        <script src="//js.arcgis.com/4.2/"></script>

        <script src="@Url.Content("~/lib/esri-system-js/dist/esriSystem.js")"></script>

        <!-- Call load.js to handle loading angular and esri together -->
        <script src="@Url.Content("~/app/load.js")"></script>
    }
    else
    {
          <!-- Load ESRI api -->
        <script src="//js.arcgis.com/4.2/"></script>

    }


</head>
<body>

    <app-component>
        <div class="loading-modal">
            <div class="loading-content">
                <i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i>&nbsp;<span id="message">Loading app...</span>
            </div>
        </div>
    </app-component>

    

    @if (useDistBuild)
    {
        <script>

            //declare these two objects globally if using aot as they're called when developing for template references. So won't be used in the aot version but just need to exist.
            var __moduleName = "aot_compilation";
            var module = { id: "aot_compilaton" };

            //use dojo's require to load build.js. This will work as we would have used rollup to generate an amd formatted output.
            require(['./dist/build.js'], function (app) {
            });

        </script>
    }



</body>

</html>



